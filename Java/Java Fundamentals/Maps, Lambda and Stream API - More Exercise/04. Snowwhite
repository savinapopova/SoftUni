package AssociativeArraysME;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.stream.Collectors;

public class SnowWhite {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String input = scanner.nextLine();
        Map<String, Map<String, Integer>> dwarfsMap = new LinkedHashMap<>();

        while (!input.equals("Once upon a time")) {

            String[] inputArr = input.split(" <:> ");
            String hatColor = inputArr[1];
            String name = inputArr[0];
            int physics = Integer.parseInt(inputArr[2]);

            if (!dwarfsMap.containsKey(hatColor)) {

                dwarfsMap.put(hatColor, new LinkedHashMap<>());
                dwarfsMap.get(hatColor).put(name, physics);

            } else {

                if (!dwarfsMap.get(hatColor).containsKey(name)) {

                    dwarfsMap.get(hatColor).put(name, physics);

                } else {

                    int currentPhysics = dwarfsMap.get(hatColor).get(name);
                    if (physics > currentPhysics) {

                        dwarfsMap.get(hatColor).put(name, physics);
                    }
                }
            }



            input = scanner.nextLine();
        }

         Map<String, Integer> nameMap = new LinkedHashMap<>();

        for (Map.Entry<String, Map<String, Integer>> entry : dwarfsMap.entrySet()) {

            for (Map.Entry<String, Integer> stringIntegerEntry : entry.getValue().entrySet()) {

                nameMap.put("(" + entry.getKey() + ") " + stringIntegerEntry.getKey() + " " + entry.getValue().size(), stringIntegerEntry.getValue());
            }


        }

        nameMap.entrySet().stream().sorted((e2, e1) -> {

            int sort = Integer.compare(e1.getValue(), e2.getValue());
            if (sort == 0) {

                String[] sort1 = e1.getKey().split(" ");
                String[] sort2 = e2.getKey().split(" ");
                sort = sort1[2].compareTo(sort2[2]);
            }
            return sort;
        }).forEach(entry -> {
           String[] printing = entry.getKey().split(" ");
            System.out.printf("%s %s <-> %d%n",printing[0], printing[1], entry.getValue());
        });

//        nameMap = nameMap.entrySet().stream().sorted((e1, e2) -> e2.getKey().compareTo(e1.getKey()))
//                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue
//                ,(a1, a2) -> a1, LinkedHashMap::new));
//
//        nameMap.entrySet().stream().sorted((e1, e2) -> e2.getValue().compareTo(e1.getValue()))
//                .forEach(dwarf -> System.out.printf("%s <-> %d%n", dwarf.getKey(), dwarf.getValue()));


    }
}
