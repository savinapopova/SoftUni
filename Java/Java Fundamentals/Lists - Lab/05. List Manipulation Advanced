package RecursionAndBacktracking;

import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class ListManipulationAdvanced {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        List<Integer> numbers = Arrays.stream(scanner.nextLine().split("\\s+"))
                .map(Integer::parseInt).collect(Collectors.toList());

        String commandLine = scanner.nextLine();

        while (!commandLine.equals("end")) {
            String[] arr = commandLine.split(" ");
            String command = arr[0];

            switch (command) {

                case "Contains":
                    int num = Integer.parseInt(arr[1]);
                    if (numbers.contains(num)) {
                        System.out.println("Yes");
                    } else {
                        System.out.println("No such number");
                    }
                    break;
                case "Print":
                    String type = arr[1];

                    if (type.equals("even")) {
                        numbers.stream().filter(n -> n % 2 == 0)
                                .forEach(n -> System.out.print(n + " "));
                    } else {
                        numbers.stream().filter(n -> n % 2 != 0)
                                .forEach(n -> System.out.print(n + " "));
                    }
                    System.out.println();
                    break;
                case "Get":
                    int sum = numbers.stream()
                            .mapToInt((n)->(n))
                            .sum();
                    System.out.println(sum);
                    break;
                case "Filter":
                    String condition = arr[1];
                    int number = Integer.parseInt(arr[2]);

                    switch (condition) {
                        case "<":
                            numbers.stream().filter(n -> n < number)
                                    .forEach(n -> System.out.print(n + " "));
                            break;
                        case ">":
                            numbers.stream().filter(n -> n > number)
                                    .forEach(n -> System.out.print(n + " "));
                            break;
                        case "<=":
                            numbers.stream().filter(n -> n <= number)
                                    .forEach(n -> System.out.print(n + " "));
                            break;
                        case ">=":
                            numbers.stream().filter(n -> n >= number)
                                    .forEach(n -> System.out.print(n + " "));
                            break;
                    }
                    System.out.println();

            }
            commandLine = scanner.nextLine();
        }




    }
}
